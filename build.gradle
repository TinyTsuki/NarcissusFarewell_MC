def javaVer = 1.8

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'

sourceCompatibility = javaVer
targetCompatibility = javaVer

version = project.mod_version
group = project.mod_group_id

archivesBaseName = project.mod_id

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    runDir = "run"
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {

    testImplementation 'junit:junit:4.13.2'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_version", project.mod_version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "mod_authors", project.mod_authors
    inputs.property "mod_description", project.mod_description

    filesMatching('mcmod.info') {
        expand(
                'mod_id': project.mod_id,
                'mod_name': project.mod_name,
                'mod_description': project.mod_description,
                'mod_version': project.mod_version,
                'minecraft_version': project.minecraft_version,
                'mod_authors': project.mod_authors
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// 自定义打包路径与输出格式
tasks.named('jar', Jar).configure {
    archiveBaseName.set(mod_id)
    archiveVersion.set("forge-${mod_version}")
    destinationDirectory.set(file("${projectDir}/builds/${mod_version.split('-')[1]}"))

    manifest {
        attributes(
                "Specification-Title": project.mod_id,
                "Specification-Version": "1",
                "Specification-Vendor": project.mod_authors,
                "Implementation-Title": project.mod_name,
                "Implementation-Version": project.mod_version,
                "Implementation-Vendor": project.mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

// 生成 BuildConfig.java
tasks.register('generateBuildConfig') {
    doLast {
        def outputDir = file("$buildDir/generated/sources/buildConfig/java")
        def packageDir = new File(outputDir, "xin/vanilla/narcissus")
        packageDir.mkdirs()

        def file = new File(packageDir, "BuildConfig.java")
        file.text = """// Auto-generated build config file
package xin.vanilla.narcissus;

public class BuildConfig {
    public static final String MODID = "${mod_id}";
    public static final String NAME = "${mod_name}";
    public static final String VERSION = "${mod_version}";
}
"""
    }
}

compileJava.dependsOn generateBuildConfig
sourceSets.main.java.srcDir "$buildDir/generated/sources/buildConfig/java"
